# start window and pane numbers at 1 to match keyboard order with tmux window order
set -g base-index 1
setw -g pane-base-index 1

# renumber windows sequentially after closing any of them
set -g renumber-windows on

# vim colorscheme fix
set -g default-terminal xterm-256color
set -ga terminal-overrides ",xterm-256color:RGB"

# use shell like shortcuts C-u, C-a etc in tmux command promt
set-option -g status-keys "emacs"

# set the length of the status command
set-option -g status-left-length 50

# set the time how long tmux messages are displayed
set-option -g display-time 3000

# remove vim esc delay
# see https://github.com/neovim/neovim/wiki/FAQ#esc-in-tmux-or-gnu-screen-is-delayed
set -sg escape-time 10

# reload tmux config
bind r source-file ~/.tmux.conf \; display-message "tmux configuration reloaded"

# mnemonic keybindings to open horizontal `-` and vertica '|' (same key as `\`) splits
# plus add option to start panes at the current folder
# note: \ should be escaped with `\` or be in quotes
bind-key - split-window -v  -c '#{pane_current_path}'
bind-key \\ split-window -h  -c '#{pane_current_path}'

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"
bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# Try!
# Use vim keybindings in copy mode
# setw -g mode-keys vi
# bind-key -T copy-mode-vi v send -X begin-selection
# bind-key -T copy-mode-vi y send -X copy-pipe-and-cancel "pbcopy"
# unbind -T copy-mode-vi Enter
# bind-key -T copy-mode-vi Enter send -X copy-pipe-and-cancel "pbcopy"
# unbind -T copy-mode-vi Space
# bind -T copy-mode-vi Space send -X jump-again
# bind-key -T copy-mode-vi 0 send -X back-to-indentation
# bind y run 'tmux save-buffer - | pbcopy '
# bind C-y run 'tmux save-buffer - | pbcopy '

# start new windows in the current folder
bind c new-window -c "#{pane_current_path}"

# resizing, coarse adjustment (5 or 10 cursor cells per bump)
bind -n C-Left resize-pane -L 8
bind -n C-Right resize-pane -R 8
bind -n C-Down resize-pane -D 4
bind -n C-Up resize-pane -U 4
# resizing, fine adjustment (1 or 2 cursor cells per bump)
bind -n S-Left resize-pane -L 2
bind -n S-Right resize-pane -R 2
bind -n S-Down resize-pane -D 1
bind -n S-Up resize-pane -U 1

# breaking a pane out to a new window
bind-key b break-pane -d

# jump to a session/window/pane with choose-tree
bind-key C-p choose-tree

# open fugutive git status
bind-key g split-window -h -c "#{pane_current_path}" "nvim +Git"

# open journal
bind-key j split-window -h -c ~/Projects/squire/journal "nvim $(date '+%Y%m%d').md"
